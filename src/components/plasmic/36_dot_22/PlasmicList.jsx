// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: byT51ah2LGWp7TY4NhRWN5
// Component: x1WQduodKu
import * as React from "react";
import { Link } from "gatsby";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ControlButton from "../../ControlButton"; // plasmic-import: MeM-3KPeHe/component
import Logo from "../../Logo"; // plasmic-import: Ez2OM_1IjG/component
import { useScreenVariants as useScreenVariantszHblDRlCkyA0O } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZHblDRlCkyA0O/globalVariant
import { useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: 9hwEG37kNX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_36_dot_22.module.css"; // plasmic-import: byT51ah2LGWp7TY4NhRWN5/projectcss
import * as sty from "./PlasmicList.module.css"; // plasmic-import: x1WQduodKu/css
import InfoIcon from "./icons/PlasmicIcon__Info"; // plasmic-import: rh7Opgr7v/icon
import DarkmodeIcon from "./icons/PlasmicIcon__Darkmode"; // plasmic-import: GFhQaEFLo/icon

export const PlasmicList__VariantProps = new Array();

export const PlasmicList__ArgProps = new Array("characterList");

function PlasmicList__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszHblDRlCkyA0O(),
    mode: useMode()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [projectcss.global_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              )
            }
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              )
            })}
          >
            <ControlButton
              data-plasmic-name={"info"}
              data-plasmic-override={overrides.info}
              className={classNames("__wab_instance", sty.info)}
              icon={
                <InfoIcon
                  data-plasmic-name={"infoIcon2"}
                  data-plasmic-override={overrides.infoIcon2}
                  className={classNames(projectcss.all, sty.infoIcon2)}
                  role={"img"}
                />
              }
            />

            <p.PlasmicLink
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              href={"/"}
              platform={"gatsby"}
            >
              {(
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? true
                  : true
              ) ? (
                <Logo
                  data-plasmic-name={"logo"}
                  data-plasmic-override={overrides.logo}
                  className={classNames("__wab_instance", sty.logo)}
                />
              ) : null}
            </p.PlasmicLink>

            <ControlButton
              data-plasmic-name={"modetoggle"}
              data-plasmic-override={overrides.modetoggle}
              className={classNames("__wab_instance", sty.modetoggle)}
              icon={
                <DarkmodeIcon
                  data-plasmic-name={"infoIcon"}
                  data-plasmic-override={overrides.infoIcon}
                  className={classNames(projectcss.all, sty.infoIcon)}
                  role={"img"}
                />
              }
            />
          </div>

          <p.Stack
            as={"ol"}
            data-plasmic-name={"list"}
            data-plasmic-override={overrides.list}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.ol, sty.list)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    sty.li__kCL6
                  )}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___3A9WI)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                  />
                </li>
              ),

              value: args.characterList
            })}
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "info",
    "infoIcon2",
    "link",
    "logo",
    "modetoggle",
    "infoIcon",
    "list"
  ],

  freeBox: [
    "freeBox",
    "info",
    "infoIcon2",
    "link",
    "logo",
    "modetoggle",
    "infoIcon"
  ],

  info: ["info", "infoIcon2"],
  infoIcon2: ["infoIcon2"],
  link: ["link", "logo"],
  logo: ["logo"],
  modetoggle: ["modetoggle", "infoIcon"],
  infoIcon: ["infoIcon"],
  list: ["list"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicList__ArgProps,
      internalVariantPropNames: PlasmicList__VariantProps
    });

    return PlasmicList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicList";
  } else {
    func.displayName = `PlasmicList.${nodeName}`;
  }
  return func;
}

export const PlasmicList = Object.assign(
  // Top-level PlasmicList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    info: makeNodeComponent("info"),
    infoIcon2: makeNodeComponent("infoIcon2"),
    link: makeNodeComponent("link"),
    logo: makeNodeComponent("logo"),
    modetoggle: makeNodeComponent("modetoggle"),
    infoIcon: makeNodeComponent("infoIcon"),
    list: makeNodeComponent("list"),
    // Metadata about props expected for PlasmicList
    internalVariantProps: PlasmicList__VariantProps,
    internalArgProps: PlasmicList__ArgProps
  }
);

export default PlasmicList;
/* prettier-ignore-end */
