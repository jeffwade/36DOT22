// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: byT51ah2LGWp7TY4NhRWN5
// Component: 0ttrvnk3PBsW
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: RXJa6ld21ci/component
import Controls from "../../Controls"; // plasmic-import: kU4eFuQrko/component
import { useScreenVariants as useScreenVariantszHblDRlCkyA0O } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZHblDRlCkyA0O/globalVariant
import { useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: 9hwEG37kNX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_36_dot_22.module.css"; // plasmic-import: byT51ah2LGWp7TY4NhRWN5/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: 0ttrvnk3PBsW/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszHblDRlCkyA0O(),
    mode: useMode()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_tokens,
              sty.root,
              {
                [projectcss.global_mode_dark]: hasVariant(
                  globalVariants,
                  "mode",
                  "dark"
                )
              }
            )}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              {true ? (
                <div
                  data-plasmic-name={"headline"}
                  data-plasmic-override={overrides.headline}
                  className={classNames(projectcss.all, sty.headline)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"36 Days of Type"}
                  </h1>

                  {(
                    hasVariant(globalVariants, "screen", "desktopOnly")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"freeBox"}
                      data-plasmic-override={overrides.freeBox}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox)}
                    >
                      <h2
                        data-plasmic-name={"h2"}
                        data-plasmic-override={overrides.h2}
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2
                        )}
                      >
                        {"2022 Edition"}
                      </h2>

                      <h3
                        data-plasmic-name={"byline"}
                        data-plasmic-override={overrides.byline}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.byline
                        )}
                      >
                        {"by jeff wade"}
                      </h3>
                    </p.Stack>
                  ) : null}
                </div>
              ) : null}
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              hasGap={true}
              className={classNames(projectcss.all, sty.footer)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__g6Wpw)}
                color={"secondary"}
              >
                {"List"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button__waSwW)}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"Latest"}
                </div>
              </Button>
            </p.Stack>

            <Controls
              data-plasmic-name={"controls"}
              data-plasmic-override={overrides.controls}
              className={classNames("__wab_instance", sty.controls)}
            />
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "headline",
    "h1",
    "freeBox",
    "h2",
    "byline",
    "footer",
    "text",
    "controls"
  ],

  header: ["header", "headline", "h1", "freeBox", "h2", "byline"],
  headline: ["headline", "h1", "freeBox", "h2", "byline"],
  h1: ["h1"],
  freeBox: ["freeBox", "h2", "byline"],
  h2: ["h2"],
  byline: ["byline"],
  footer: ["footer", "text"],
  text: ["text"],
  controls: ["controls"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    headline: makeNodeComponent("headline"),
    h1: makeNodeComponent("h1"),
    freeBox: makeNodeComponent("freeBox"),
    h2: makeNodeComponent("h2"),
    byline: makeNodeComponent("byline"),
    footer: makeNodeComponent("footer"),
    text: makeNodeComponent("text"),
    controls: makeNodeComponent("controls"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
