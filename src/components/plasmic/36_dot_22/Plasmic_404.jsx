// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: byT51ah2LGWp7TY4NhRWN5
// Component: CQfF1mkHx4
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import P5Sketch from "../../P5Sketch"; // plasmic-import: xVVehOIDYb/component
import { useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: 9hwEG37kNX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_36_dot_22.module.css"; // plasmic-import: byT51ah2LGWp7TY4NhRWN5/projectcss
import * as sty from "./Plasmic_404.module.css"; // plasmic-import: CQfF1mkHx4/css

export const Plasmic_404__VariantProps = new Array();

export const Plasmic_404__ArgProps = new Array();

function Plasmic_404__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    mode: useMode()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [projectcss.global_mode_dark]: hasVariant(
              globalVariants,
              "mode",
              "dark"
            )
          }
        )}
      >
        <P5Sketch
          data-plasmic-name={"p5Sketch"}
          data-plasmic-override={overrides.p5Sketch}
          className={classNames("__wab_instance", sty.p5Sketch)}
        />
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "p5Sketch"],
  p5Sketch: ["p5Sketch"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: Plasmic_404__ArgProps,
      internalVariantPropNames: Plasmic_404__VariantProps
    });

    return Plasmic_404__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_404";
  } else {
    func.displayName = `Plasmic_404.${nodeName}`;
  }
  return func;
}

export const Plasmic_404 = Object.assign(
  // Top-level Plasmic_404 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    p5Sketch: makeNodeComponent("p5Sketch"),
    // Metadata about props expected for Plasmic_404
    internalVariantProps: Plasmic_404__VariantProps,
    internalArgProps: Plasmic_404__ArgProps
  }
);

export default Plasmic_404;
/* prettier-ignore-end */
