// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: byT51ah2LGWp7TY4NhRWN5
// Component: kU4eFuQrko
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: 9hwEG37kNX/globalVariant
import { useScreenVariants as useScreenVariantszHblDRlCkyA0O } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZHblDRlCkyA0O/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_36_dot_22.module.css"; // plasmic-import: byT51ah2LGWp7TY4NhRWN5/projectcss
import * as sty from "./PlasmicControls.module.css"; // plasmic-import: kU4eFuQrko/css
import InfoIcon from "./icons/PlasmicIcon__Info"; // plasmic-import: rh7Opgr7v/icon
import DarkmodeIcon from "./icons/PlasmicIcon__Darkmode"; // plasmic-import: GFhQaEFLo/icon
import LightmodeIcon from "./icons/PlasmicIcon__Lightmode"; // plasmic-import: ovRZdneIh/icon

export const PlasmicControls__VariantProps = new Array();

export const PlasmicControls__ArgProps = new Array();

function PlasmicControls__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantszHblDRlCkyA0O()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootglobal_mode_dark]: hasVariant(globalVariants, "mode", "dark")
        }
      )}
    >
      <InfoIcon
        data-plasmic-name={"infoIcon"}
        data-plasmic-override={overrides.infoIcon}
        className={classNames(projectcss.all, sty.infoIcon)}
        role={"img"}
      />

      <p.PlasmicIcon
        data-plasmic-name={"darkModeIcon"}
        data-plasmic-override={overrides.darkModeIcon}
        PlasmicIconType={
          hasVariant(globalVariants, "mode", "dark")
            ? LightmodeIcon
            : DarkmodeIcon
        }
        className={classNames(projectcss.all, sty.darkModeIcon, {
          [sty.darkModeIconglobal_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          )
        })}
        role={"img"}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "infoIcon", "darkModeIcon"],
  infoIcon: ["infoIcon"],
  darkModeIcon: ["darkModeIcon"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicControls__ArgProps,
      internalVariantPropNames: PlasmicControls__VariantProps
    });

    return PlasmicControls__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicControls";
  } else {
    func.displayName = `PlasmicControls.${nodeName}`;
  }
  return func;
}

export const PlasmicControls = Object.assign(
  // Top-level PlasmicControls renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    infoIcon: makeNodeComponent("infoIcon"),
    darkModeIcon: makeNodeComponent("darkModeIcon"),
    // Metadata about props expected for PlasmicControls
    internalVariantProps: PlasmicControls__VariantProps,
    internalArgProps: PlasmicControls__ArgProps
  }
);

export default PlasmicControls;
/* prettier-ignore-end */
