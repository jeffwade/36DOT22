{"version":3,"file":"2525ca2b4881fe9911cbb8081340847caf7a19a3-1ae3b01dc3389e6e09ca.js","mappings":"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","sources":["webpack://36-dot-22/./src/components/plasmic/36_dot_22/icons/PlasmicIcon__ArrowRight.jsx","webpack://36-dot-22/./src/components/plasmic/36_dot_22/PlasmicButton.module.css","webpack://36-dot-22/./src/components/plasmic/36_dot_22/icons/PlasmicIcon__Checksvg.jsx","webpack://36-dot-22/./src/components/plasmic/36_dot_22/PlasmicButton.jsx","webpack://36-dot-22/./src/components/Button.jsx","webpack://36-dot-22/./src/components/plasmic/36_dot_22/PlasmicHomepage.module.css","webpack://36-dot-22/./src/components/plasmic/36_dot_22/PlasmicHomepage.jsx","webpack://36-dot-22/./src/pages/index.jsx"],"sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\";\nimport { classNames } from \"@plasmicapp/react-web\";\n\nexport function ArrowRightIcon(props) {\n  const { className, style, title, ...restProps } = props;\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 16 16\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M12.854 4.646l3 3a.5.5 0 010 .708l-3 3-.708-.707L14.293 8.5H13c-.366 0-.705.135-1.06.38-.361.25-.704.591-1.086.974l-.017.016c-.363.363-.765.765-1.209 1.072-.458.318-.994.558-1.628.558-.339 0-.638-.086-.894-.253a1.813 1.813 0 01-.57-.62c-.254-.437-.394-.996-.511-1.467l-.01-.039c-.13-.52-.24-.943-.416-1.244a.823.823 0 00-.25-.286A.61.61 0 005 7.5c-.354 0-.618.125-.878.348-.225.193-.42.433-.658.723l-.205.25c-.32.383-.706.81-1.23 1.135-.534.332-1.188.544-2.029.544v-1c.659 0 1.13-.163 1.502-.394.382-.237.684-.56.989-.926l.169-.206c.244-.299.512-.628.811-.885C3.868 6.75 4.354 6.5 5 6.5c.339 0 .638.086.894.253.25.163.433.386.57.62.254.437.394.996.511 1.467l.01.039c.13.52.24.943.416 1.244.082.141.166.23.25.286A.61.61 0 008 10.5c.366 0 .705-.135 1.06-.38.362-.25.704-.591 1.086-.974l.017-.016c.363-.363.765-.765 1.209-1.072.458-.318.994-.558 1.628-.558h1.293l-2.147-2.146.708-.708z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  );\n}\n\nexport default ArrowRightIcon;\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicButton-module--root--G5YNm\";\nexport var rootsize_minimal = \"PlasmicButton-module--rootsize_minimal--mHPuo\";\nexport var rootcolor_secondary = \"PlasmicButton-module--rootcolor_secondary--E8dd7\";\nexport var rootcolor_clear = \"PlasmicButton-module--rootcolor_clear--yMtoi\";\nexport var root___focusVisibleWithin = \"PlasmicButton-module--root___focusVisibleWithin--dUKdS\";\nexport var rootcolor_secondary____focusVisibleWithin = \"PlasmicButton-module--rootcolor_secondary____focusVisibleWithin--+YdYm\";\nexport var startIconContainer = \"PlasmicButton-module--startIconContainer--sd3EY\";\nexport var slotTargetStartIcon = \"PlasmicButton-module--slotTargetStartIcon--Z6Pjx\";\nexport var slotTargetStartIconcolor_clear = \"PlasmicButton-module--slotTargetStartIconcolor_clear--U-t51\";\nexport var svg__ceRxd = \"PlasmicButton-module--svg__ceRxd--+Df86\";\nexport var contentContainer = \"PlasmicButton-module--contentContainer--t916l\";\nexport var contentContainer___focusVisibleWithin = \"PlasmicButton-module--contentContainer___focusVisibleWithin--jdEU7\";\nexport var slotTargetChildren = \"PlasmicButton-module--slotTargetChildren--aMjU4\";\nexport var slotTargetChildrencolor_secondary = \"PlasmicButton-module--slotTargetChildrencolor_secondary--e3uFB\";\nexport var slotTargetChildrencolor_clear = \"PlasmicButton-module--slotTargetChildrencolor_clear--YoMoc\";\nexport var __wab_slot = \"PlasmicButton-module--__wab_slot--GFswA\";\nexport var slotTargetChildren___focusVisibleWithin = \"PlasmicButton-module--slotTargetChildren___focusVisibleWithin--gJKvL\";\nexport var endIconContainer = \"PlasmicButton-module--endIconContainer--2UHYW\";\nexport var slotTargetEndIcon = \"PlasmicButton-module--slotTargetEndIcon--CiBau\";\nexport var slotTargetEndIconcolor_clear = \"PlasmicButton-module--slotTargetEndIconcolor_clear--TJTk0\";\nexport var svg__pcunZ = \"PlasmicButton-module--svg__pcunZ--Y5emr\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\";\nimport { classNames } from \"@plasmicapp/react-web\";\n\nexport function ChecksvgIcon(props) {\n  const { className, style, title, ...restProps } = props;\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      fill={\"none\"}\n      viewBox={\"0 0 24 24\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        fillRule={\"evenodd\"}\n        clipRule={\"evenodd\"}\n        d={\n          \"M18.416 5.876a.75.75 0 01.208 1.04L11.42 17.721a1.75 1.75 0 01-2.871.06l-3.156-4.34a.75.75 0 111.214-.882l3.155 4.339a.25.25 0 00.41-.009l7.204-10.805a.75.75 0 011.04-.208z\"\n        }\n        fill={\"currentColor\"}\n      ></path>\n    </svg>\n  );\n}\n\nexport default ChecksvgIcon;\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: byT51ah2LGWp7TY4NhRWN5\n// Component: RXJa6ld21ci\nimport * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport * as p from \"@plasmicapp/react-web\";\nimport * as pp from \"@plasmicapp/react-web\";\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  useTrigger,\n  deriveRenderOpts,\n  ensureGlobalVariants\n} from \"@plasmicapp/react-web\";\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\"; // plasmic-import: 9hwEG37kNX/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\";\nimport * as projectcss from \"./plasmic_36_dot_22.module.css\"; // plasmic-import: byT51ah2LGWp7TY4NhRWN5/projectcss\nimport * as sty from \"./PlasmicButton.module.css\"; // plasmic-import: RXJa6ld21ci/css\nimport ChecksvgIcon from \"./icons/PlasmicIcon__Checksvg\"; // plasmic-import: VTvT8L0CPnm/icon\nimport ArrowRightIcon from \"./icons/PlasmicIcon__ArrowRight\"; // plasmic-import: ON7qZLXAQxN/icon\n\nexport const PlasmicButton__VariantProps = new Array(\"size\", \"color\");\n\nexport const PlasmicButton__ArgProps = new Array(\n  \"children\",\n  \"startIcon\",\n  \"endIcon\",\n  \"link\"\n);\n\nfunction PlasmicButton__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props;\n  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =\n    useTrigger(\"useFocusVisibleWithin\", {\n      isTextInput: false\n    });\n\n  const triggers = {\n    focusVisibleWithin_root: isRootFocusVisibleWithin\n  };\n\n  const globalVariants = ensureGlobalVariants({\n    mode: useMode()\n  });\n\n  return (\n    <p.Stack\n      as={\"button\"}\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      hasGap={true}\n      className={classNames(\n        projectcss.all,\n        projectcss.button,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [projectcss.global_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n          [sty.rootcolor_clear]: hasVariant(variants, \"color\", \"clear\"),\n          [sty.rootcolor_secondary]: hasVariant(variants, \"color\", \"secondary\"),\n          [sty.rootcolor_secondary____focusVisibleWithin]:\n            hasVariant(variants, \"color\", \"secondary\") &&\n            triggers.focusVisibleWithin_root,\n          [sty.rootglobal_mode_dark]: hasVariant(\n            globalVariants,\n            \"mode\",\n            \"dark\"\n          ),\n\n          [sty.rootsize_minimal]: hasVariant(variants, \"size\", \"minimal\")\n        }\n      )}\n      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}\n    >\n      {false ? (\n        <div\n          data-plasmic-name={\"startIconContainer\"}\n          data-plasmic-override={overrides.startIconContainer}\n          className={classNames(projectcss.all, sty.startIconContainer, {\n            [sty.startIconContainercolor_secondary]: hasVariant(\n              variants,\n              \"color\",\n              \"secondary\"\n            )\n          })}\n        >\n          {p.renderPlasmicSlot({\n            defaultContents: (\n              <ChecksvgIcon\n                className={classNames(projectcss.all, sty.svg__ceRxd)}\n                role={\"img\"}\n              />\n            ),\n\n            value: args.startIcon,\n            className: classNames(sty.slotTargetStartIcon, {\n              [sty.slotTargetStartIconcolor_clear]: hasVariant(\n                variants,\n                \"color\",\n                \"clear\"\n              ),\n\n              [sty.slotTargetStartIconcolor_secondary]: hasVariant(\n                variants,\n                \"color\",\n                \"secondary\"\n              )\n            })\n          })}\n        </div>\n      ) : null}\n\n      <div\n        data-plasmic-name={\"contentContainer\"}\n        data-plasmic-override={overrides.contentContainer}\n        className={classNames(projectcss.all, sty.contentContainer, {\n          [sty.contentContainer___focusVisibleWithin]:\n            triggers.focusVisibleWithin_root,\n          [sty.contentContainersize_minimal]: hasVariant(\n            variants,\n            \"size\",\n            \"minimal\"\n          )\n        })}\n      >\n        {p.renderPlasmicSlot({\n          defaultContents: \"Button\",\n          value: args.children,\n          className: classNames(sty.slotTargetChildren, {\n            [sty.slotTargetChildren___focusVisibleWithin]:\n              triggers.focusVisibleWithin_root,\n            [sty.slotTargetChildrencolor_clear]: hasVariant(\n              variants,\n              \"color\",\n              \"clear\"\n            ),\n\n            [sty.slotTargetChildrencolor_secondary]: hasVariant(\n              variants,\n              \"color\",\n              \"secondary\"\n            ),\n\n            [sty.slotTargetChildrensize_minimal]: hasVariant(\n              variants,\n              \"size\",\n              \"minimal\"\n            )\n          })\n        })}\n      </div>\n\n      {false ? (\n        <div\n          data-plasmic-name={\"endIconContainer\"}\n          data-plasmic-override={overrides.endIconContainer}\n          className={classNames(projectcss.all, sty.endIconContainer)}\n        >\n          {p.renderPlasmicSlot({\n            defaultContents: (\n              <ArrowRightIcon\n                className={classNames(projectcss.all, sty.svg__pcunZ)}\n                role={\"img\"}\n              />\n            ),\n\n            value: args.endIcon,\n            className: classNames(sty.slotTargetEndIcon, {\n              [sty.slotTargetEndIconcolor_clear]: hasVariant(\n                variants,\n                \"color\",\n                \"clear\"\n              )\n            })\n          })}\n        </div>\n      ) : null}\n    </p.Stack>\n  );\n}\n\nfunction useBehavior(props, ref) {\n  const b = pp.useButton(\n    PlasmicButton,\n    props,\n    {\n      showStartIconVariant: {\n        group: \"showStartIcon\",\n        variant: \"showStartIcon\"\n      },\n\n      showEndIconVariant: { group: \"showEndIcon\", variant: \"showEndIcon\" },\n      isDisabledVariant: { group: \"isDisabled\", variant: \"isDisabled\" },\n      contentSlot: \"children\",\n      startIconSlot: \"startIcon\",\n      endIconSlot: \"endIcon\",\n      root: \"root\"\n    },\n\n    ref\n  );\n\n  if (b.plasmicProps.overrides.root.as === \"a\") {\n    b.plasmicProps.overrides.root.as = p.PlasmicLink;\n    b.plasmicProps.overrides.root.props.component = Link;\n    b.plasmicProps.overrides.root.props.platform = \"gatsby\";\n  }\n  return b;\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"startIconContainer\", \"contentContainer\", \"endIconContainer\"],\n  startIconContainer: [\"startIconContainer\"],\n  contentContainer: [\"contentContainer\"],\n  endIconContainer: [\"endIconContainer\"]\n};\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicButton__ArgProps,\n      internalVariantPropNames: PlasmicButton__VariantProps\n    });\n\n    return PlasmicButton__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName\n    });\n  };\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicButton\";\n  } else {\n    func.displayName = `PlasmicButton.${nodeName}`;\n  }\n  return func;\n}\n\nexport const PlasmicButton = Object.assign(\n  // Top-level PlasmicButton renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    startIconContainer: makeNodeComponent(\"startIconContainer\"),\n    contentContainer: makeNodeComponent(\"contentContainer\"),\n    endIconContainer: makeNodeComponent(\"endIconContainer\"),\n    // Metadata about props expected for PlasmicButton\n    internalVariantProps: PlasmicButton__VariantProps,\n    internalArgProps: PlasmicButton__ArgProps,\n    useBehavior\n  }\n);\n\nexport default PlasmicButton;\n/* prettier-ignore-end */\n","import * as React from \"react\";\nimport { PlasmicButton } from \"./plasmic/36_dot_22/PlasmicButton\";\n\nfunction Button_(props, ref) {\n  const { plasmicProps } = PlasmicButton.useBehavior(props, ref);\n  return <PlasmicButton {...plasmicProps} />;\n}\n\nconst Button = React.forwardRef(Button_);\n\nexport default Object.assign(Button, {\n  __plumeType: \"button\"\n});\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicHomepage-module--root--IIg7c\";\nexport var header = \"PlasmicHomepage-module--header--GKrN4\";\nexport var freeBox__qSoMw = \"PlasmicHomepage-module--freeBox__qSoMw--HqqYJ\";\nexport var info = \"PlasmicHomepage-module--info--YueZE\";\nexport var infoicon = \"PlasmicHomepage-module--infoicon--u+8pr\";\nexport var modeToggle = \"PlasmicHomepage-module--modeToggle--KJqjr\";\nexport var darkmodeIcon = \"PlasmicHomepage-module--darkmodeIcon--YSBia\";\nexport var logo = \"PlasmicHomepage-module--logo--nbnWF\";\nexport var freeBox__sPasa = \"PlasmicHomepage-module--freeBox__sPasa--2zklo\";\nexport var text___70UnO = \"PlasmicHomepage-module--text___70UnO--cX7Bs\";\nexport var text__bbuH = \"PlasmicHomepage-module--text__bbuH--5IV80\";\nexport var text__evUhE = \"PlasmicHomepage-module--text__evUhE--+q3uU\";\nexport var footer = \"PlasmicHomepage-module--footer--yFT7c\";\nexport var button__g6Wpw = \"PlasmicHomepage-module--button__g6Wpw--kjkpV\";\nexport var svg___7F69M = \"PlasmicHomepage-module--svg___7F69M--nEjN0\";\nexport var svg__c6Nly = \"PlasmicHomepage-module--svg__c6Nly--EAkLe\";\nexport var button__waSwW = \"PlasmicHomepage-module--button__waSwW--j0yvW\";\nexport var svg__jmqts = \"PlasmicHomepage-module--svg__jmqts--cfAr9\";\nexport var text__sxMwY = \"PlasmicHomepage-module--text__sxMwY--hyv52\";\nexport var svg__vHKew = \"PlasmicHomepage-module--svg__vHKew--UyF2g\";\nexport var infoModal = \"PlasmicHomepage-module--infoModal--GUaQD\";\nexport var h1 = \"PlasmicHomepage-module--h1--QWtNn\";\nexport var freeBox__gQtHi = \"PlasmicHomepage-module--freeBox__gQtHi--ZiVx2\";\nexport var h2 = \"PlasmicHomepage-module--h2--8hmgj\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: byT51ah2LGWp7TY4NhRWN5\n// Component: 0ttrvnk3PBsW\nimport * as React from \"react\";\nimport * as p from \"@plasmicapp/react-web\";\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants\n} from \"@plasmicapp/react-web\";\nimport ControlButton from \"../../ControlButton\"; // plasmic-import: MeM-3KPeHe/component\nimport Logo from \"../../Logo\"; // plasmic-import: Ez2OM_1IjG/component\nimport Button from \"../../Button\"; // plasmic-import: RXJa6ld21ci/component\nimport { useScreenVariants as useScreenVariantszHblDRlCkyA0O } from \"./PlasmicGlobalVariant__Screen\"; // plasmic-import: ZHblDRlCkyA0O/globalVariant\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\"; // plasmic-import: 9hwEG37kNX/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\";\nimport * as projectcss from \"./plasmic_36_dot_22.module.css\"; // plasmic-import: byT51ah2LGWp7TY4NhRWN5/projectcss\nimport * as sty from \"./PlasmicHomepage.module.css\"; // plasmic-import: 0ttrvnk3PBsW/css\nimport InfoIcon from \"./icons/PlasmicIcon__Info\"; // plasmic-import: rh7Opgr7v/icon\nimport DarkmodeIcon from \"./icons/PlasmicIcon__Darkmode\"; // plasmic-import: GFhQaEFLo/icon\n\nexport const PlasmicHomepage__VariantProps = new Array();\n\nexport const PlasmicHomepage__ArgProps = new Array();\n\nfunction PlasmicHomepage__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props;\n  const globalVariants = ensureGlobalVariants({\n    screen: useScreenVariantszHblDRlCkyA0O(),\n    mode: useMode()\n  });\n\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        {true ? (\n          <div\n            data-plasmic-name={\"root\"}\n            data-plasmic-override={overrides.root}\n            data-plasmic-root={true}\n            data-plasmic-for-node={forNode}\n            className={classNames(\n              projectcss.all,\n              projectcss.root_reset,\n              projectcss.plasmic_default_styles,\n              projectcss.plasmic_tokens,\n              sty.root,\n              {\n                [projectcss.global_mode_dark]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"dark\"\n                ),\n\n                [sty.rootglobal_mode_dark]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"dark\"\n                )\n              }\n            )}\n          >\n            <p.Stack\n              as={\"div\"}\n              data-plasmic-name={\"header\"}\n              data-plasmic-override={overrides.header}\n              hasGap={true}\n              className={classNames(projectcss.all, sty.header)}\n            >\n              {(\n                hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                  ? true\n                  : true\n              ) ? (\n                <div\n                  className={classNames(projectcss.all, sty.freeBox__qSoMw, {\n                    [sty.freeBoxglobal_mode_dark__qSoMWcm4Qj]: hasVariant(\n                      globalVariants,\n                      \"mode\",\n                      \"dark\"\n                    )\n                  })}\n                >\n                  <ControlButton\n                    data-plasmic-name={\"info\"}\n                    data-plasmic-override={overrides.info}\n                    className={classNames(\"__wab_instance\", sty.info)}\n                    icon={\n                      <InfoIcon\n                        data-plasmic-name={\"infoicon\"}\n                        data-plasmic-override={overrides.infoicon}\n                        className={classNames(projectcss.all, sty.infoicon)}\n                        role={\"img\"}\n                      />\n                    }\n                  />\n\n                  <ControlButton\n                    data-plasmic-name={\"modeToggle\"}\n                    data-plasmic-override={overrides.modeToggle}\n                    className={classNames(\"__wab_instance\", sty.modeToggle)}\n                    icon={\n                      <DarkmodeIcon\n                        data-plasmic-name={\"darkmodeIcon\"}\n                        data-plasmic-override={overrides.darkmodeIcon}\n                        className={classNames(projectcss.all, sty.darkmodeIcon)}\n                        role={\"img\"}\n                      />\n                    }\n                  />\n                </div>\n              ) : null}\n              {(\n                hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                  ? true\n                  : true\n              ) ? (\n                <Logo\n                  data-plasmic-name={\"logo\"}\n                  data-plasmic-override={overrides.logo}\n                  className={classNames(\"__wab_instance\", sty.logo)}\n                />\n              ) : null}\n\n              <div className={classNames(projectcss.all, sty.freeBox__sPasa)}>\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text___70UnO\n                  )}\n                >\n                  {\"days\"}\n                </div>\n\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__bbuH\n                  )}\n                >\n                  {\"of\"}\n                </div>\n\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__evUhE\n                  )}\n                >\n                  {\"type\"}\n                </div>\n              </div>\n            </p.Stack>\n\n            <p.Stack\n              as={\"nav\"}\n              data-plasmic-name={\"footer\"}\n              data-plasmic-override={overrides.footer}\n              hasGap={true}\n              className={classNames(projectcss.all, sty.footer, {\n                [sty.footerglobal_mode_dark]: hasVariant(\n                  globalVariants,\n                  \"mode\",\n                  \"dark\"\n                )\n              })}\n            >\n              {true ? (\n                <Button\n                  className={classNames(\"__wab_instance\", sty.button__g6Wpw)}\n                  color={\"secondary\"}\n                  link={\"/list\"}\n                >\n                  {\"List\"}\n                </Button>\n              ) : null}\n\n              <Button\n                className={classNames(\"__wab_instance\", sty.button__waSwW, {\n                  [sty.buttonglobal_mode_dark__waSwWcm4Qj]: hasVariant(\n                    globalVariants,\n                    \"mode\",\n                    \"dark\"\n                  )\n                })}\n                link={\"/latest\"}\n              >\n                <div\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.__wab_text,\n                    sty.text__sxMwY\n                  )}\n                >\n                  {\"see the type\"}\n                </div>\n              </Button>\n            </p.Stack>\n\n            {true ? (\n              <div\n                data-plasmic-name={\"infoModal\"}\n                data-plasmic-override={overrides.infoModal}\n                className={classNames(projectcss.all, sty.infoModal)}\n              >\n                <h1\n                  data-plasmic-name={\"h1\"}\n                  data-plasmic-override={overrides.h1}\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.h1,\n                    projectcss.__wab_text,\n                    sty.h1\n                  )}\n                >\n                  {\"36 Days of Type\"}\n                </h1>\n\n                {(\n                  hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                    ? true\n                    : true\n                ) ? (\n                  <p.Stack\n                    as={\"div\"}\n                    hasGap={true}\n                    className={classNames(projectcss.all, sty.freeBox__gQtHi)}\n                  >\n                    <h2\n                      data-plasmic-name={\"h2\"}\n                      data-plasmic-override={overrides.h2}\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.h2,\n                        projectcss.__wab_text,\n                        sty.h2\n                      )}\n                    >\n                      {\"2022 Edition\"}\n                    </h2>\n\n                    <h3\n                      data-plasmic-name={\"byline\"}\n                      data-plasmic-override={overrides.byline}\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.h3,\n                        projectcss.__wab_text,\n                        sty.byline\n                      )}\n                    >\n                      {\"by jeff wade\"}\n                    </h3>\n                  </p.Stack>\n                ) : null}\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"header\",\n    \"info\",\n    \"infoicon\",\n    \"modeToggle\",\n    \"darkmodeIcon\",\n    \"logo\",\n    \"footer\",\n    \"infoModal\",\n    \"h1\",\n    \"h2\",\n    \"byline\"\n  ],\n\n  header: [\"header\", \"info\", \"infoicon\", \"modeToggle\", \"darkmodeIcon\", \"logo\"],\n  info: [\"info\", \"infoicon\"],\n  infoicon: [\"infoicon\"],\n  modeToggle: [\"modeToggle\", \"darkmodeIcon\"],\n  darkmodeIcon: [\"darkmodeIcon\"],\n  logo: [\"logo\"],\n  footer: [\"footer\"],\n  infoModal: [\"infoModal\", \"h1\", \"h2\", \"byline\"],\n  h1: [\"h1\"],\n  h2: [\"h2\"],\n  byline: [\"byline\"]\n};\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicHomepage__ArgProps,\n      internalVariantPropNames: PlasmicHomepage__VariantProps\n    });\n\n    return PlasmicHomepage__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName\n    });\n  };\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicHomepage\";\n  } else {\n    func.displayName = `PlasmicHomepage.${nodeName}`;\n  }\n  return func;\n}\n\nexport const PlasmicHomepage = Object.assign(\n  // Top-level PlasmicHomepage renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    header: makeNodeComponent(\"header\"),\n    info: makeNodeComponent(\"info\"),\n    infoicon: makeNodeComponent(\"infoicon\"),\n    modeToggle: makeNodeComponent(\"modeToggle\"),\n    darkmodeIcon: makeNodeComponent(\"darkmodeIcon\"),\n    logo: makeNodeComponent(\"logo\"),\n    footer: makeNodeComponent(\"footer\"),\n    infoModal: makeNodeComponent(\"infoModal\"),\n    h1: makeNodeComponent(\"h1\"),\n    h2: makeNodeComponent(\"h2\"),\n    byline: makeNodeComponent(\"byline\"),\n    // Metadata about props expected for PlasmicHomepage\n    internalVariantProps: PlasmicHomepage__VariantProps,\n    internalArgProps: PlasmicHomepage__ArgProps\n  }\n);\n\nexport default PlasmicHomepage;\n/* prettier-ignore-end */\n","import * as React from \"react\";\nimport { PlasmicHomepage } from \"../components/plasmic/36_dot_22/PlasmicHomepage\";\nimport { ModeContext } from \"../components/plasmic/36_dot_22/PlasmicGlobalVariant__Mode\";\nimport { useState } from \"react\";\n\nfunction Homepage() {\n  const [mode, setMode] = useState(undefined);\n\n  return (\n    <ModeContext.Provider value={mode}>\n      <PlasmicHomepage\n        modeToggle={{\n          onClick: () => {\n            if ( mode === 'dark' ) {\n              setMode('light');\n            } else {\n               setMode('dark');\n            }\n          }\n        }}\n\n      />\n    </ModeContext.Provider>\n  );\n}\n\nexport default Homepage;\n"],"names":["props","className","style","title","restProps","xmlns","fill","viewBox","height","width","classNames","fillRule","clipRule","d","root","rootsize_minimal","rootcolor_secondary","rootcolor_clear","root___focusVisibleWithin","rootcolor_secondary____focusVisibleWithin","contentContainer","contentContainer___focusVisibleWithin","slotTargetChildren","slotTargetChildrencolor_secondary","slotTargetChildrencolor_clear","slotTargetChildren___focusVisibleWithin","PlasmicButton__VariantProps","Array","PlasmicButton__ArgProps","PlasmicDescendants","startIconContainer","endIconContainer","makeNodeComponent","nodeName","func","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","useTrigger","isTextInput","isRootFocusVisibleWithin","triggerRootFocusVisibleWithinProps","triggers","focusVisibleWithin_root","globalVariants","ensureGlobalVariants","mode","useMode","as","hasGap","projectcss","sty","hasVariant","p","defaultContents","value","children","PlasmicButton__RenderFunc","displayName","PlasmicButton","Object","assign","internalVariantProps","internalArgProps","useBehavior","ref","b","pp","showStartIconVariant","group","variant","showEndIconVariant","isDisabledVariant","contentSlot","startIconSlot","endIconSlot","plasmicProps","component","Link","platform","Button_","Button","React","__plumeType","header","freeBox__qSoMw","info","infoicon","modeToggle","darkmodeIcon","logo","freeBox__sPasa","text___70UnO","text__bbuH","text__evUhE","footer","button__g6Wpw","button__waSwW","text__sxMwY","infoModal","h1","freeBox__gQtHi","h2","PlasmicHomepage__VariantProps","PlasmicHomepage__ArgProps","byline","screen","useScreenVariantszHblDRlCkyA0O","ControlButton","icon","role","Logo","color","link","PlasmicHomepage__RenderFunc","PlasmicHomepage","useState","undefined","setMode","onClick"],"sourceRoot":""}