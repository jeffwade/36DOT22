// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: byT51ah2LGWp7TY4NhRWN5
// Component: Ez2OM_1IjG
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: 9hwEG37kNX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_36_dot_22.module.css"; // plasmic-import: byT51ah2LGWp7TY4NhRWN5/projectcss
import * as sty from "./PlasmicLogo.module.css"; // plasmic-import: Ez2OM_1IjG/css
import ThirtysixIcon from "./icons/PlasmicIcon__Thirtysix"; // plasmic-import: ao2mpgOaJ/icon
import TwentytwoIcon from "./icons/PlasmicIcon__Twentytwo"; // plasmic-import: rKfHxY0N0/icon

export const PlasmicLogo__VariantProps = new Array("neon");

export const PlasmicLogo__ArgProps = new Array();

function PlasmicLogo__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false
    });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const [isRootFocusWithin, triggerRootFocusWithinProps] = useTrigger(
    "useFocusedWithin",
    {}
  );

  const [isRootActive, triggerRootActiveProps] = useTrigger("usePressed", {});
  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin,
    hover_root: isRootHover,
    focusWithin_root: isRootFocusWithin,
    active_root: isRootActive
  };

  const globalVariants = ensureGlobalVariants({
    mode: useMode()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),

          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root
        }
      )}
      data-plasmic-trigger-props={[
        triggerRootFocusVisibleWithinProps,
        triggerRootHoverProps,
        triggerRootFocusWithinProps,
        triggerRootActiveProps
      ]}
    >
      <ThirtysixIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg, {
          [sty.svg___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.svgglobal_mode_dark]: hasVariant(globalVariants, "mode", "dark"),
          [sty.svgneon]: hasVariant(variants, "neon", "neon")
        })}
        role={"img"}
      />

      {(
        triggers.active_root
          ? true
          : triggers.focusVisibleWithin_root
          ? true
          : triggers.focusWithin_root
          ? true
          : triggers.hover_root
          ? true
          : hasVariant(variants, "neon", "neon")
          ? true
          : hasVariant(globalVariants, "mode", "dark")
          ? true
          : false
      ) ? (
        <p.PlasmicIcon
          data-plasmic-name={"twentytwo"}
          data-plasmic-override={overrides.twentytwo}
          PlasmicIconType={
            triggers.active_root
              ? TwentytwoIcon
              : triggers.focusVisibleWithin_root
              ? TwentytwoIcon
              : triggers.focusWithin_root
              ? TwentytwoIcon
              : triggers.hover_root
              ? TwentytwoIcon
              : hasVariant(variants, "neon", "neon")
              ? TwentytwoIcon
              : ThirtysixIcon
          }
          className={classNames(projectcss.all, sty.twentytwo, {
            [sty.twentytwo___focusVisibleWithin]:
              triggers.focusVisibleWithin_root,
            [sty.twentytwoglobal_mode_dark]: hasVariant(
              globalVariants,
              "mode",
              "dark"
            ),

            [sty.twentytwoneon]: hasVariant(variants, "neon", "neon")
          })}
          role={"img"}
        />
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg", "twentytwo"],
  svg: ["svg"],
  twentytwo: ["twentytwo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogo__ArgProps,
      internalVariantPropNames: PlasmicLogo__VariantProps
    });

    return PlasmicLogo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogo";
  } else {
    func.displayName = `PlasmicLogo.${nodeName}`;
  }
  return func;
}

export const PlasmicLogo = Object.assign(
  // Top-level PlasmicLogo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    twentytwo: makeNodeComponent("twentytwo"),
    // Metadata about props expected for PlasmicLogo
    internalVariantProps: PlasmicLogo__VariantProps,
    internalArgProps: PlasmicLogo__ArgProps
  }
);

export default PlasmicLogo;
/* prettier-ignore-end */
