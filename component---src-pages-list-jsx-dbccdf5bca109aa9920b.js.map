{"version":3,"file":"component---src-pages-list-jsx-dbccdf5bca109aa9920b.js","mappings":"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","sources":["webpack://36-dot-22/./src/components/plasmic/36_dot_22/PlasmicList.jsx","webpack://36-dot-22/./src/components/plasmic/36_dot_22/PlasmicList.module.css","webpack://36-dot-22/./src/pages/list.jsx"],"sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: byT51ah2LGWp7TY4NhRWN5\n// Component: x1WQduodKu\nimport * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport * as p from \"@plasmicapp/react-web\";\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n  ensureGlobalVariants\n} from \"@plasmicapp/react-web\";\nimport ControlButton from \"../../ControlButton\"; // plasmic-import: MeM-3KPeHe/component\nimport Logo from \"../../Logo\"; // plasmic-import: Ez2OM_1IjG/component\nimport { useScreenVariants as useScreenVariantszHblDRlCkyA0O } from \"./PlasmicGlobalVariant__Screen\"; // plasmic-import: ZHblDRlCkyA0O/globalVariant\nimport { useMode } from \"./PlasmicGlobalVariant__Mode\"; // plasmic-import: 9hwEG37kNX/globalVariant\nimport \"@plasmicapp/react-web/lib/plasmic.css\";\nimport * as projectcss from \"./plasmic_36_dot_22.module.css\"; // plasmic-import: byT51ah2LGWp7TY4NhRWN5/projectcss\nimport * as sty from \"./PlasmicList.module.css\"; // plasmic-import: x1WQduodKu/css\nimport InfoIcon from \"./icons/PlasmicIcon__Info\"; // plasmic-import: rh7Opgr7v/icon\nimport DarkmodeIcon from \"./icons/PlasmicIcon__Darkmode\"; // plasmic-import: GFhQaEFLo/icon\n\nexport const PlasmicList__VariantProps = new Array();\n\nexport const PlasmicList__ArgProps = new Array(\"characterList\");\n\nfunction PlasmicList__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props;\n  const globalVariants = ensureGlobalVariants({\n    screen: useScreenVariantszHblDRlCkyA0O(),\n    mode: useMode()\n  });\n\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        <p.Stack\n          as={\"div\"}\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          hasGap={true}\n          className={classNames(\n            projectcss.all,\n            projectcss.root_reset,\n            projectcss.plasmic_default_styles,\n            projectcss.plasmic_tokens,\n            sty.root,\n            {\n              [projectcss.global_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              )\n            }\n          )}\n        >\n          <div\n            data-plasmic-name={\"freeBox\"}\n            data-plasmic-override={overrides.freeBox}\n            className={classNames(projectcss.all, sty.freeBox, {\n              [sty.freeBoxglobal_mode_dark]: hasVariant(\n                globalVariants,\n                \"mode\",\n                \"dark\"\n              )\n            })}\n          >\n            <ControlButton\n              data-plasmic-name={\"info\"}\n              data-plasmic-override={overrides.info}\n              className={classNames(\"__wab_instance\", sty.info)}\n              icon={\n                <InfoIcon\n                  data-plasmic-name={\"infoIcon2\"}\n                  data-plasmic-override={overrides.infoIcon2}\n                  className={classNames(projectcss.all, sty.infoIcon2)}\n                  role={\"img\"}\n                />\n              }\n            />\n\n            <p.PlasmicLink\n              data-plasmic-name={\"link\"}\n              data-plasmic-override={overrides.link}\n              className={classNames(projectcss.all, projectcss.a, sty.link)}\n              component={Link}\n              href={\"/\"}\n              platform={\"gatsby\"}\n            >\n              {(\n                hasVariant(globalVariants, \"screen\", \"desktopOnly\")\n                  ? true\n                  : true\n              ) ? (\n                <Logo\n                  data-plasmic-name={\"logo\"}\n                  data-plasmic-override={overrides.logo}\n                  className={classNames(\"__wab_instance\", sty.logo)}\n                />\n              ) : null}\n            </p.PlasmicLink>\n\n            <ControlButton\n              data-plasmic-name={\"modetoggle\"}\n              data-plasmic-override={overrides.modetoggle}\n              className={classNames(\"__wab_instance\", sty.modetoggle)}\n              icon={\n                <DarkmodeIcon\n                  data-plasmic-name={\"infoIcon\"}\n                  data-plasmic-override={overrides.infoIcon}\n                  className={classNames(projectcss.all, sty.infoIcon)}\n                  role={\"img\"}\n                />\n              }\n            />\n          </div>\n\n          <p.Stack\n            as={\"ol\"}\n            data-plasmic-name={\"list\"}\n            data-plasmic-override={overrides.list}\n            hasGap={true}\n            className={classNames(projectcss.all, projectcss.ol, sty.list)}\n          >\n            {p.renderPlasmicSlot({\n              defaultContents: (\n                <li\n                  className={classNames(\n                    projectcss.all,\n                    projectcss.li,\n                    sty.li__kCL6\n                  )}\n                >\n                  <p.PlasmicImg\n                    alt={\"\"}\n                    className={classNames(sty.img___3A9WI)}\n                    displayHeight={\"100%\"}\n                    displayMaxHeight={\"none\"}\n                    displayMaxWidth={\"100%\"}\n                    displayMinHeight={\"0\"}\n                    displayMinWidth={\"0\"}\n                    displayWidth={\"100%\"}\n                    loading={\"lazy\"}\n                  />\n                </li>\n              ),\n\n              value: args.characterList\n            })}\n          </p.Stack>\n        </p.Stack>\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"freeBox\",\n    \"info\",\n    \"infoIcon2\",\n    \"link\",\n    \"logo\",\n    \"modetoggle\",\n    \"infoIcon\",\n    \"list\"\n  ],\n\n  freeBox: [\n    \"freeBox\",\n    \"info\",\n    \"infoIcon2\",\n    \"link\",\n    \"logo\",\n    \"modetoggle\",\n    \"infoIcon\"\n  ],\n\n  info: [\"info\", \"infoIcon2\"],\n  infoIcon2: [\"infoIcon2\"],\n  link: [\"link\", \"logo\"],\n  logo: [\"logo\"],\n  modetoggle: [\"modetoggle\", \"infoIcon\"],\n  infoIcon: [\"infoIcon\"],\n  list: [\"list\"]\n};\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicList__ArgProps,\n      internalVariantPropNames: PlasmicList__VariantProps\n    });\n\n    return PlasmicList__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName\n    });\n  };\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicList\";\n  } else {\n    func.displayName = `PlasmicList.${nodeName}`;\n  }\n  return func;\n}\n\nexport const PlasmicList = Object.assign(\n  // Top-level PlasmicList renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    freeBox: makeNodeComponent(\"freeBox\"),\n    info: makeNodeComponent(\"info\"),\n    infoIcon2: makeNodeComponent(\"infoIcon2\"),\n    link: makeNodeComponent(\"link\"),\n    logo: makeNodeComponent(\"logo\"),\n    modetoggle: makeNodeComponent(\"modetoggle\"),\n    infoIcon: makeNodeComponent(\"infoIcon\"),\n    list: makeNodeComponent(\"list\"),\n    // Metadata about props expected for PlasmicList\n    internalVariantProps: PlasmicList__VariantProps,\n    internalArgProps: PlasmicList__ArgProps\n  }\n);\n\nexport default PlasmicList;\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicList-module--root--x05IB\";\nexport var freeBox = \"PlasmicList-module--freeBox--YY-5J\";\nexport var freeBoxglobal_mode_dark = \"PlasmicList-module--freeBoxglobal_mode_dark--DeHnJ\";\nexport var info = \"PlasmicList-module--info--Fp87b\";\nexport var infoIcon2 = \"PlasmicList-module--infoIcon2--sPkqm\";\nexport var link = \"PlasmicList-module--link--7jtd-\";\nexport var logo = \"PlasmicList-module--logo--3rk8G\";\nexport var modetoggle = \"PlasmicList-module--modetoggle--j+LE8\";\nexport var infoIcon = \"PlasmicList-module--infoIcon--BURNT\";\nexport var list = \"PlasmicList-module--list--ycN2u\";\nexport var li__kCL6 = \"PlasmicList-module--li__kCL6--h9qSn\";\nexport var img___3A9WI = \"PlasmicList-module--img___3A9WI--3Ebdz\";\nexport var __wab_imgSpacer = \"PlasmicList-module--__wab_img-spacer--QVzXt\";","// This is a skeleton starter React page generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\";\nimport { ModeContext } from \"../components/plasmic/36_dot_22/PlasmicGlobalVariant__Mode\";\nimport { PlasmicList } from \"../components/plasmic/36_dot_22/PlasmicList\";\n\nfunction List() {\n  // Use PlasmicList to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicList are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, PlasmicList is wrapped by your project's global\n  // variant context providers. These wrappers may be moved to\n  // Gatsby \"wrapRootElement\" function\n  // (https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr#wrapRootElement).\n  return (\n    <ModeContext.Provider value={undefined}>\n      <PlasmicList />\n    </ModeContext.Provider>\n  );\n}\n\nexport default List;\n"],"names":["PlasmicList__VariantProps","Array","PlasmicList__ArgProps","PlasmicDescendants","root","freeBox","info","infoIcon2","link","logo","modetoggle","infoIcon","list","makeNodeComponent","nodeName","func","props","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","globalVariants","ensureGlobalVariants","screen","useScreenVariantszHblDRlCkyA0O","mode","useMode","className","projectcss","as","hasGap","classNames","hasVariant","ControlButton","icon","role","component","Link","href","platform","Logo","p","defaultContents","alt","displayHeight","displayMaxHeight","displayMaxWidth","displayMinHeight","displayMinWidth","displayWidth","loading","value","characterList","PlasmicList__RenderFunc","displayName","PlasmicList","Object","assign","internalVariantProps","internalArgProps","undefined"],"sourceRoot":""}